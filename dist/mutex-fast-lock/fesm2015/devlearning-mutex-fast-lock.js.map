{"version":3,"file":"devlearning-mutex-fast-lock.js","sources":["../../../projects/mutex-fast-lock/src/lib/models/mutex-fast-lock-config.ts","../../../projects/mutex-fast-lock/src/lib/models/mutex-lock-stats.ts","../../../projects/mutex-fast-lock/src/lib/mutex-fast-lock-config.injector.ts","../../../projects/mutex-fast-lock/src/lib/models/lock-item.ts","../../../projects/mutex-fast-lock/src/lib/mutex-fast-lock.service.ts","../../../projects/mutex-fast-lock/src/lib/mutex-fast-lock.module.ts","../../../projects/mutex-fast-lock/src/public-api.ts","../../../projects/mutex-fast-lock/src/devlearning-mutex-fast-lock.ts"],"sourcesContent":["export class MutexFastLockConfig{\r\n  lockPrefix: string;\r\n  timeout: number;\r\n  debugEnabled: boolean;\r\n}","export class MutexLockStats {\r\n  restartCount: number;\r\n  locksLost: number;\r\n  contentionCount: number;\r\n  acquireDuration: number;\r\n  acquireStart: number;\r\n  acquireEnd: number;\r\n  lockStart: number;\r\n  lockEnd: number;\r\n  lockDuration: number;\r\n}","import { InjectionToken } from '@angular/core';\r\nimport { MutexFastLockConfig } from './models/mutex-fast-lock-config';\r\n\r\nexport const MUTEX_FAST_LOCK_CONFIG = new InjectionToken<MutexFastLockConfig>('MUTEX_FAST_LOCK_CONFIG');","export class LockItem{\r\n  clientId: string;\r\n  expiresAt: number;\r\n}","import { Inject, Injectable } from '@angular/core';\r\nimport { MUTEX_FAST_LOCK_CONFIG } from './mutex-fast-lock-config.injector';\r\nimport { MutexFastLockConfig } from './models/mutex-fast-lock-config';\r\nimport { MutexLockStats } from './models/mutex-lock-stats';\r\nimport { Observable, Subscriber } from 'rxjs';\r\nimport { LockItem } from './models/lock-item';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MutexFastLockService {\r\n\r\n  private _clientId: string;\r\n  private _xPrefix: string;\r\n  private _yPrefix: string;\r\n\r\n  constructor(\r\n    @Inject(MUTEX_FAST_LOCK_CONFIG) private readonly _config: MutexFastLockConfig,\r\n  ) {\r\n    this._clientId = this._generateRandomId();\r\n    this._xPrefix = _config.lockPrefix + '_X_';\r\n    this._yPrefix = _config.lockPrefix + '_Y_';\r\n\r\n    let that = this;\r\n    window.addEventListener(\"beforeunload\", function (ev) {\r\n      var arr = [];\r\n\r\n      for (var i = 0; i < localStorage.length; i++) {\r\n        if (localStorage.key(i).indexOf(that._xPrefix) == 0\r\n          || localStorage.key(i).indexOf(that._yPrefix) == 0) {\r\n          arr.push(localStorage.key(i));\r\n        }\r\n      }\r\n\r\n      for (var i = 0; i < arr.length; i++) {\r\n        localStorage.removeItem(arr[i]);\r\n      }\r\n    });\r\n  }\r\n\r\n  public lock(key: string, timeout: number = -1) {\r\n    let that = this;\r\n\r\n    if (timeout == -1) timeout = this._config.timeout;\r\n\r\n    let xLock = that._xPrefix + key;\r\n    let yLock = that._yPrefix + key;\r\n\r\n    let lockStats: MutexLockStats = new MutexLockStats();\r\n\r\n    that.resetStats(lockStats);\r\n\r\n    this._config.debugEnabled ?? console.debug('Attempting to acquire Lock on \"%s\" using FastMutex instance \"%s\"', key, this._clientId);\r\n\r\n    lockStats.acquireStart = new Date().getTime();\r\n\r\n    //return new Promise(function (resolve, reject) {\r\n    return new Observable<MutexLockStats>(subscriber => {\r\n      // we need to differentiate between API calls to lock() and our internal\r\n      // recursive calls so that we can timeout based on the original lock() and\r\n      // not each subsequent call.  Therefore, create a new function here within\r\n      // the promise closure that we use for subsequent calls:\r\n      let acquireLock = function acquireLock(key) {\r\n\r\n        that._releaseExpiredLock(xLock);\r\n        that._releaseExpiredLock(yLock);\r\n\r\n        var elapsedTime = new Date().getTime() - lockStats.acquireStart;\r\n        if (elapsedTime >= timeout) {\r\n          that._config.debugEnabled ?? console.debug('Lock on \"%s\" could not be acquired within %sms by FastMutex client \"%s\"', key, timeout, that._clientId);\r\n          subscriber.error(new Error('Lock could not be acquired within ' + timeout + 'ms'));\r\n        }\r\n\r\n        that._setItem(xLock, that._clientId, timeout);\r\n\r\n        // if y exists, another client is getting a lock, so retry in a bit\r\n        var lsY = that._getItem(yLock, timeout);\r\n        if (lsY) {\r\n          that._config.debugEnabled ?? console.debug('Lock exists on Y (%s), restarting...', lsY);\r\n          lockStats.restartCount++;\r\n          setTimeout(function () {\r\n            return acquireLock(key);\r\n          }, 10);\r\n          return;\r\n        }\r\n\r\n        // ask for inner lock\r\n        that._setItem(yLock, that._clientId, timeout);\r\n\r\n        // if x was changed, another client is contending for an inner lock\r\n        var lsX = that._getItem(xLock, timeout);\r\n        if (lsX !== that._clientId) {\r\n          lockStats.contentionCount++;\r\n          that._config.debugEnabled ?? console.debug('Lock contention detected. X=\"%s\"', lsX);\r\n\r\n          // Give enough time for critical section:\r\n          setTimeout(function () {\r\n            lsY = that._getItem(yLock, timeout);\r\n            if (lsY === that._clientId) {\r\n              // we have a lock\r\n              that._config.debugEnabled ?? console.debug('FastMutex client \"%s\" won the lock contention on \"%s\"', that._clientId, key);\r\n              that.resolveWithStats(subscriber, lockStats);\r\n            } else {\r\n              // we lost the lock, restart the process again\r\n              lockStats.restartCount++;\r\n              lockStats.locksLost++;\r\n              that._config.debugEnabled ?? console.debug('FastMutex client \"%s\" lost the lock contention on \"%s\" to another process (%s). Restarting...', that._clientId, key, lsY);\r\n              setTimeout(function () {\r\n                return acquireLock(key);\r\n              }, 10);\r\n            }\r\n          }, 100);\r\n\r\n          return;\r\n        }\r\n\r\n        // no contention:\r\n        that._config.debugEnabled ?? console.debug('FastMutex client \"%s\" acquired a lock on \"%s\" with no contention', that._clientId, key);\r\n        that.resolveWithStats(subscriber, lockStats);\r\n      };\r\n\r\n      acquireLock(key);\r\n\r\n    });\r\n  }\r\n\r\n  public release(key) {\r\n    this._config.debugEnabled ?? console.debug('FastMutex client \"%s\" is releasing lock on \"%s\"', this._clientId, key);\r\n\r\n    let x = this._xPrefix + key;\r\n    let y = this._yPrefix + key;\r\n    localStorage.removeItem(x);\r\n    localStorage.removeItem(y);\r\n\r\n    //that.lockStats.lockEnd = new Date().getTime();\r\n    //that.lockStats.lockDuration = that.lockStats.lockEnd - that.lockStats.lockStart;\r\n\r\n    //let retStats = angular.copy(that.lockStats);\r\n\r\n    //that.resetStats();\r\n\r\n    //return retStats;\r\n  }\r\n\r\n  private _generateRandomId() {\r\n    return Math.floor(Math.random() * 10000000000) + '';\r\n  }\r\n\r\n  private resetStats(lockStats: MutexLockStats) {\r\n    lockStats.restartCount = 0;\r\n    lockStats.locksLost = 0;\r\n    lockStats.contentionCount = 0;\r\n    lockStats.acquireDuration = 0;\r\n    lockStats.acquireStart = null;\r\n  }\r\n\r\n  private resolveWithStats(subscriber: Subscriber<MutexLockStats>, stats: MutexLockStats) {\r\n    var currentTime = new Date().getTime();\r\n    stats.acquireEnd = currentTime;\r\n    stats.acquireDuration = stats.acquireEnd - stats.acquireStart;\r\n    stats.lockStart = currentTime;\r\n    subscriber.next(stats);\r\n    subscriber.complete();\r\n  }\r\n\r\n  /**\r\n   * Helper function to wrap all values in an object that includes the time (so\r\n   * that we can expire it in the future) and json.stringify's it\r\n   */\r\n  private _setItem(key, clientId, timeout) {\r\n    let lockItem = new LockItem();\r\n    lockItem.clientId = clientId;\r\n    lockItem.expiresAt = new Date().getTime() + timeout;\r\n    return localStorage.setItem(key, JSON.stringify(lockItem));\r\n  }\r\n\r\n  /**\r\n   * Helper function to parse JSON encoded values set in localStorage\r\n   */\r\n  private _getItem(key, timeout) {\r\n    var item = localStorage.getItem(key);\r\n\r\n    if (!item) return null;\r\n\r\n    var lockItem = <LockItem>JSON.parse(item);\r\n    if (new Date().getTime() - lockItem.expiresAt >= timeout) {\r\n      this._config.debugEnabled ?? console.debug('FastMutex client \"%s\" removed an expired record on \"%s\"', this._clientId, key);\r\n      localStorage.removeItem(key);\r\n      return null;\r\n    }\r\n\r\n    return lockItem.clientId;\r\n  }\r\n\r\n  private _releaseExpiredLock(key: string){\r\n    var item = localStorage.getItem(key);\r\n\r\n    if (!item) return null;\r\n\r\n    var lockItem = <LockItem>JSON.parse(item);\r\n\r\n    if (lockItem.expiresAt <= new Date().getTime()) {\r\n      this._config.debugEnabled ?? console.debug('FastMutex auto removed an expired record on \"%s\"', key);\r\n      localStorage.removeItem(key);\r\n    }\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from \"@angular/core\";\r\nimport { MutexFastLockConfig } from \"./models/mutex-fast-lock-config\";\r\nimport { MUTEX_FAST_LOCK_CONFIG } from \"./mutex-fast-lock-config.injector\";\r\n\r\n@NgModule()\r\nexport class MutexFastLockModule {\r\n  static forRoot(config: MutexFastLockConfig): ModuleWithProviders<MutexFastLockModule> {\r\n\r\n    return ({\r\n      ngModule: MutexFastLockModule,\r\n      providers: [\r\n        { provide: MUTEX_FAST_LOCK_CONFIG, useValue: config },\r\n      ]\r\n    });\r\n\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of cnet-mutex-fast-lock\r\n */\r\n\r\nexport * from './lib/models/mutex-fast-lock-config';\r\nexport * from './lib/models/mutex-lock-stats';\r\nexport * from './lib/mutex-fast-lock.service';\r\nexport * from './lib/mutex-fast-lock.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MUTEX_FAST_LOCK_CONFIG as ɵa} from './lib/mutex-fast-lock-config.injector';"],"names":[],"mappings":"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"}